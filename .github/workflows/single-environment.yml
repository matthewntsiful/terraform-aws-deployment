name: 'Terraform Simple Deploy'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]

env:
  TF_VERSION: 1.6.6
  AWS_REGION: us-east-2
  WORKING_DIR: 'infra'

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform (${{ github.event.inputs.action || (github.event_name == ''push'' && ''apply'' || ''plan'') }})'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up SSH for Private Modules
        if: vars.USES_PRIVATE_MODULES == 'true'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure Git for SSH
        if: vars.USES_PRIVATE_MODULES == 'true'
        run: |
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
        env:
          TF_LOG: DEBUG
          TF_LOG_PATH: ${{ env.WORKING_DIR }}/terraform.log

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          echo "🔧 Initializing Terraform..."
          echo "Working directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          echo ""
          terraform init -no-color

      - name: Terraform Validate
        run: |
          echo "✅ Validating Terraform configuration..."
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          echo "🔍 Starting Terraform Plan..."
          echo "Working directory: $(pwd)"
          echo "Terraform version: $(terraform version)"
          
          # Determine plan action
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            echo "📋 Running destroy plan..."
            terraform plan -destroy -input=false -out=tfplan -detailed-exitcode
            echo "action=destroy" >> $GITHUB_OUTPUT
          else
            echo "📋 Running apply plan..."
            terraform plan -input=false -out=tfplan -detailed-exitcode
            echo "action=apply" >> $GITHUB_OUTPUT
          fi
          
          # Capture the exit code
          PLAN_EXIT_CODE=$?
          echo "plan_exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Generate human-readable plan
          echo "📄 Generating plan output..."
          terraform show -no-color tfplan > plan.txt
          
          # Show plan summary
          echo "📊 Plan Summary:"
          if [[ $PLAN_EXIT_CODE -eq 0 ]]; then
            echo "✅ No changes detected"
          elif [[ $PLAN_EXIT_CODE -eq 2 ]]; then
            echo "📋 Changes detected"
          else
            echo "❌ Plan failed with exit code: $PLAN_EXIT_CODE"
          fi
          
          # Always succeed this step so we can handle errors properly
          exit 0

      - name: Update PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const plan = fs.readFileSync('${{ env.WORKING_DIR }}/plan.txt', 'utf8');
              const action = '${{ steps.plan.outputs.action }}';
              const maxLength = 65536;
              
              let body = `## 🏗️ Terraform Plan ${action === 'destroy' ? '(DESTROY)' : ''}\n\n`;
              
              if (plan.includes('No changes')) {
                body += '✅ **No infrastructure changes detected**\n\n';
              } else if (plan.includes('Error') || '${{ steps.plan.outcome }}' === 'failure') {
                body += '❌ **Plan failed** - please check the workflow logs\n\n';
              } else {
                const emoji = action === 'destroy' ? '💥' : '📋';
                body += `${emoji} **Changes detected** - review the plan below:\n\n`;
              }
              
              body += '<details><summary>Show Plan</summary>\n\n```hcl\n' + plan + '\n```\n\n</details>';
              
              if (body.length > maxLength) {
                body = body.substring(0, maxLength - 100) + '\n\n... ✂️ Plan output truncated';
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.error('Error reading plan file:', error);
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ❌ Terraform Plan Failed\n\nUnable to generate plan. Check the workflow logs for details.`
              });
            }

      - name: Check Plan Status
        if: steps.plan.outputs.plan_exit_code != '0' && steps.plan.outputs.plan_exit_code != '2'
        run: |
          echo "❌ Terraform plan failed with exit code: ${{ steps.plan.outputs.plan_exit_code }}"
          echo ""
          echo "🔍 Debugging information:"
          echo "Current AWS identity:"
          aws sts get-caller-identity || echo "Failed to get AWS identity"
          echo ""
          echo "Files in working directory:"
          ls -la
          echo ""
          echo "Terraform state:"
          terraform state list || echo "No state file or state is empty"
          echo ""
          echo "Recent Terraform logs:"
          cat .terraform/terraform.log 2>/dev/null || echo "No terraform.log found"
          exit 1

      - name: Terraform Apply/Destroy
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          if [[ "${{ steps.plan.outputs.action }}" == "destroy" ]]; then
            echo "🗑️ Destroying infrastructure..."
            terraform apply -auto-approve tfplan
          else
            echo "🚀 Applying infrastructure changes..."
            terraform apply -auto-approve tfplan
          fi

      - name: Get Terraform Outputs
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && steps.plan.outputs.action != 'destroy'
        id: outputs
        run: |
          # Get all outputs and save to file
          terraform output -json > outputs.json
          
          # Extract common outputs if they exist
          for output in application_url load_balancer_dns database_endpoint; do
            if terraform output $output >/dev/null 2>&1; then
              value=$(terraform output -raw $output)
              echo "${output}=${value}" >> $GITHUB_OUTPUT
              echo "📋 ${output}: ${value}"
            fi
          done
        continue-on-error: true

      - name: Upload Terraform Outputs
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && steps.plan.outputs.action != 'destroy'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ env.WORKING_DIR }}/outputs.json
          retention-days: 30

      - name: Verify State
        if: always()
        run: |
          echo "🔍 Current Terraform state:"
          terraform state list || echo "No resources in state"
        continue-on-error: true

      - name: Comment Deployment Result
        if: github.event_name == 'pull_request' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        uses: actions/github-script@v7
        with:
          script: |
            const action = '${{ steps.plan.outputs.action }}';
            const success = '${{ job.status }}' === 'success';
            
            let body = '';
            if (action === 'destroy') {
              body = success 
                ? `## 💥 Infrastructure Destroyed Successfully\n\n🕒 **Destroyed at:** ${new Date().toISOString()}\n📝 **Commit:** ${context.sha.substring(0, 7)}`
                : `## ❌ Infrastructure Destruction Failed\n\nCheck the workflow logs for details.`;
            } else {
              if (success) {
                body = `## ✅ Deployment Successful\n\n`;
                const outputs = [
                  '${{ steps.outputs.outputs.application_url }}',
                  '${{ steps.outputs.outputs.load_balancer_dns }}',
                  '${{ steps.outputs.outputs.database_endpoint }}'
                ].filter(Boolean);
                
                if (outputs.length > 0) {
                  body += `### 🔗 Outputs:\n${outputs.map(url => `- ${url}`).join('\n')}\n\n`;
                }
                
                body += `🕒 **Deployed at:** ${new Date().toISOString()}\n📝 **Commit:** ${context.sha.substring(0, 7)}`;
              } else {
                body = `## ❌ Deployment Failed\n\nCheck the workflow logs for details.`;
              }
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  notify:
    name: 'Slack Notification'
    needs: terraform
    if: always() && vars.SLACK_NOTIFICATIONS == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.terraform.result }}" == "success" ]]; then
            echo "status=✅ Succeeded" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.terraform.result }}" == "failure" ]]; then
            echo "status=❌ Failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          else
            echo "status=⚠️ Cancelled" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.color }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*Terraform Deployment* 🚀"
                      }
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Repository:*\n${{ github.repository }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Branch:*\n${{ github.ref_name }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Action:*\n${{ github.event.inputs.action || (github.event_name == 'push' && 'apply' || 'plan') }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Status:*\n${{ steps.status.outputs.status }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Commit:*\n<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Triggered by:*\n${{ github.actor }}"
                        }
                      ]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "View Workflow Run",
                            "emoji": true
                          },
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK