name: 'Terraform Simple Deploy'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]

env:
  TF_VERSION: 1.12.2
  AWS_REGION: us-east-2
  WORKING_DIR: 'infra'

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up SSH for Private Modules
        if: vars.USES_PRIVATE_MODULES == 'true'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure Git for SSH
        if: vars.USES_PRIVATE_MODULES == 'true'
        run: git config --global url."git@github.com:".insteadOf "https://github.com/"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init and Validate
        run: |
          terraform init
          terraform fmt -check -recursive
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terraform plan -destroy -out=tfplan
          else
            terraform plan -out=tfplan
          fi
          terraform show -no-color tfplan > plan.txt

      - name: Update PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const plan = fs.readFileSync('${{ env.WORKING_DIR }}/plan.txt', 'utf8');
              const action = 'apply';
              const maxLength = 65536;
              
              let body = `## üèóÔ∏è Terraform Plan ${action === 'destroy' ? '(DESTROY)' : ''}\n\n`;
              
              if (plan.includes('No changes')) {
                body += '‚úÖ **No infrastructure changes detected**\n\n';
              } else {
                const emoji = action === 'destroy' ? 'üí•' : 'üìã';
                body += `${emoji} **Changes detected** - review the plan below:\n\n`;
              }
              
              body += '<details><summary>Show Plan</summary>\n\n```hcl\n' + plan + '\n```\n\n</details>';
              
              if (body.length > maxLength) {
                body = body.substring(0, maxLength - 100) + '\n\n... ‚úÇÔ∏è Plan output truncated';
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.error('Error:', error);
            }

      - name: Terraform Apply or Destroy
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve tfplan

      - name: Get Outputs
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.event.inputs.action != 'destroy'
        run: |
          terraform output -json > outputs.json || echo "No outputs available"
          terraform output || echo "No outputs to display"

  notify:
    name: 'Slack Notification'
    needs: terraform
    if: always() && vars.SLACK_NOTIFICATIONS == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ needs.terraform.result == 'success' && 'good' || 'danger' }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*Terraform Deployment* üöÄ"
                      }
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Repository:*\n${{ github.repository }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Branch:*\n${{ github.ref_name }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Action:*\n${{ github.event.inputs.action || 'apply' }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Status:*\n${{ needs.terraform.result == 'success' && '‚úÖ Succeeded' || '‚ùå Failed' }}"
                        }
                      ]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "View Workflow Run",
                            "emoji": true
                          },
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK